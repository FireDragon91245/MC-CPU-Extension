{
    "$schema": "http://json-schema.org/schema",
    "hover": [
        {
            "regex": false,
            "aliases": [
                "add"
            ],
            "value": [
                "# add",
                "```mccpu",
                "add %register, %register",
                "   (%1 = %1 + %2)",
                "```"
            ]
        },
        {
            "regex": false,
            "aliases": [
                "sub"
            ],
            "value": [
                "# sub",
                "```mccpu",
                "sub %register, %register",
                "   (%1 = %1 - %2)",
                "```"
            ]
        },
        {
            "regex": false,
            "aliases": [
                "div"
            ],
            "value": [
                "# div",
                "```mccpu",
                "div %register, %register",
                "   (%1 = %1 / %2)",
                "```"
            ]
        },
        {
            "regex": false,
            "aliases": [
                "mult"
            ],
            "value": [
                "# mult",
                "```mccpu",
                "mult %register, %register",
                "   (%1 = %1 * %2)",
                "```"
            ]
        },
        {
            "regex": false,
            "aliases": [
                "inc"
            ],
            "value": [
                "# inc",
                "```mccpu",
                "inc %register",
                "   (%1 ++)",
                "```"
            ]
        },
        {
            "regex": false,
            "aliases": [
                "dec"
            ],
            "value": [
                "# dec",
                "```mccpu",
                "dec %register",
                "   (%1 --)",
                "```"
            ]
        },
        {
            "regex": false,
            "aliases": [
                "call"
            ],
            "value": [
                "# call",
                "```mccpu",
                "call %lable",
                "   (push %1, jmp %1)",
                "```",
                "- use with `ret`"
            ]
        },
        {
            "regex": false,
            "aliases": [
                "ret"
            ],
            "value": [
                "# ret",
                "```mccpu",
                "ret",
                "   (pop -> jmp)",
                "```",
                "- use with `call`"
            ]
        },
        {
            "regex": false,
            "aliases": [
                "jmp"
            ],
            "value": [
                "# jmp",
                "```mccpu",
                "  jmp %lable",
                "```"
            ]
        },
        {
            "regex": false,
            "aliases": [
                "jmpz"
            ],
            "value": [
                "# jmpz",
                "```mccpu",
                "jmpz %lable",
                "   (if zeroflag jmp %1)",
                "```",
                "- use with `cmp`"
            ]
        },
        {
            "regex": false,
            "aliases": [
                "jmps"
            ],
            "value": [
                "# jmps",
                "```mccpu",
                "jmps %lable",
                "   (if smaler flag jmp %1)",
                "```",
                "- use with `cmp`"
            ]
        },
        {
            "regex": false,
            "aliases": [
                "jmpb"
            ],
            "value": [
                "# jmpb",
                "```mccpu",
                "jmpb %lable",
                "   (if biger flag jmp %1)",
                "```",
                "- use with `cmp`"
            ]
        },
        {
            "regex": false,
            "aliases": [
                "jmpe"
            ],
            "value": [
                "# jmpe",
                "```mccpu",
                "jmpe %lable",
                "   (if equal flag jmp %1)",
                "```",
                "- use with `cmp`"
            ]
        },
        {
            "regex": false,
            "aliases": [
                "cmp"
            ],
            "value": [
                "# cmp",
                "```mccpu",
                "cmp %register, %register",
                "   (bigger, smaler, equal, zero flag = %1 >, <, ==, == 0 %2)",
                "```"
            ]
        },
        {
            "regex": false,
            "aliases": [
                "push"
            ],
            "value": [
                "# push",
                "```mccpu",
                "push %register",
                "```",
                "- pushes a number onto the stack from a register"
            ]
        },
        {
            "regex": false,
            "aliases": [
                "pop"
            ],
            "value": [
                "# pop",
                "```mccpu",
                "pop %register",
                "```",
                "- pops a number from the stack into a register"
            ]
        },
        {
            "regex": false,
            "aliases": [
                "cpy"
            ],
            "value": [
                "# cpy",
                "```mccpu",
                "cpy %register, %register",
                "   (%1 = %2)",
                "```"
            ]
        },
        {
            "regex": false,
            "aliases": [
                "load"
            ],
            "value": [
                "# load",
                "```mccpu",
                "load %register, %number",
                "   (%1 = %2)",
                "```"
            ]
        },
        {
            "regex": false,
            "aliases": [
                "mcpy"
            ],
            "value": [
                "# mcpy",
                "```mccpu",
                "mcpy %address, %address",
                "// OR",
                "mcpy %variable, %variable",
                "   (%1 = %2)",
                "```"
            ]
        },
        {
            "regex": false,
            "aliases": [
                "mload"
            ],
            "value": [
                "# mload",
                "```mccpu",
                "mload %address, %number",
                "// OR",
                "mload %variable, %number",
                "   (%1 = %2)",
                "```"
            ]
        },
        {
            "regex": false,
            "aliases": [
                "mget"
            ],
            "value": [
                "# mget",
                "```mccpu",
                "mget %register, %address",
                "// OR",
                "mget %address, %register",
                "   (%1 = %2)",
                "```"
            ]
        },
        {
            "regex": false,
            "aliases": [
                "mset"
            ],
            "value": [
                "# mset",
                "```mccpu",
                "mset %address, %register",
                "// OR",
                "mset %variable, %register",
                "   (%1 = %2)",
                "```"
            ]
        },
        {
            "regex": false,
            "aliases": [
                "and"
            ],
            "value": [
                "# and",
                "```mccpu",
                "and %register, %register",
                "   (%1 = %1 & %2)",
                "```",
                "- bitwise and"
            ]
        },
        {
            "regex": false,
            "aliases": [
                "or"
            ],
            "value": [
                "# or",
                "```mccpu",
                "or %register, %register",
                "   (%1 = %1 | %2)",
                "```",
                "- bitwise or"
            ]
        },
        {
            "regex": false,
            "aliases": [
                "not"
            ],
            "value": [
                "# not",
                "```mccpu",
                "not %register",
                "   (%1 = ~%1)",
                "```",
                "- bitwise negativ"
            ]
        },
        {
            "regex": false,
            "aliases": [
                "shl"
            ],
            "value": [
                "# shl",
                "```mccpu",
                "shl %register",
                "   (%1 = %1 << 1)",
                "```",
                "- bitwise shift left"
            ]
        },
        {
            "regex": false,
            "aliases": [
                "shr"
            ],
            "value": [
                "# shr",
                "```mccpu",
                "shr %register",
                "   (%1 = %1 >> 1)",
                "```",
                "- bitwise shift right"
            ]
        },
        {
            "regex": false,
            "aliases": [
                "nop"
            ],
            "value": [
                "# nop",
                "```mccpu",
                "nop",
                "```",
                "- why? idk"
            ]
        },
        {
            "regex": false,
            "aliases": [
                "halt"
            ],
            "value": [
                "# halt",
                "```mccpu",
                "halt",
                "```",
                "- rom filler",
                "- halt cpu"
            ]
        },
        {
            "regex": false,
            "aliases": [
                "macro",
                "endmacro",
                "#macro",
                "#endmacro"
            ],
            "value": [
                "```mccpu",
                "#macro [pattern]",
                "   ...",
                "#endmacro",
                "```",
                "## macro definition",
                "- [see wiki](https://github.com/FireDragon91245/MC-CPU-Compiler/wiki/Basic-Macros)"
            ]
        },
        {
            "regex": false,
            "aliases": [
                "memorylayout",
                "#memorylayout",
                "endmemorylayout",
                "#endmemorylayout"
            ],
            "value": [
                "```mccpu",
                "#memorylayout [behavior]",
                "   ...",
                "#endmemorylayout",
                "```",
                "## memorylayout definition",
                "- see wiki:  ",
                "**WIP**"
            ]
        },
        {
            "regex": false,
            "aliases": [
                "#comment",
                "comment"
            ],
            "value": [
                "```mccpu",
                "#comment Your Comment Text",
                "```",
                "## Macro / Function Comment",
                "- [see wiki](https://github.com/FireDragon91245/MC-CPU-Compiler/wiki/Basic-Macros)"
            ]
        },
        {
            "regex": false,
            "aliases": [
                "includemacrofile",
                "#includemacrofile"
            ],
            "value": [
                "```mccpu",
                "#includemacrofile <yourmacrofile.mccpu> <standardmacrofile>",
                "```",
                "## Macro include",
                "- see wiki **WIP**"
            ]
        }
    ]
}