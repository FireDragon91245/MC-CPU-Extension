{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "mccpu",
	"patterns": [
		{
			"include": "#expression"
		}
	],
	"repository": {
		"expression": {
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#types"
				},
				{
					"include": "#methods"
				},
				{
					"include": "#compiler-instructions"
				},
				{
					"include": "#args"
				},
				{
					"include": "#literals"
				}
			]
		},
		"methods": {
			"patterns": [
				{
					"name": "entity.name.function",
					"match": "(?<=\\s|^)add(?=\\s|$)"
				},
				{
					"name": "entity.name.function",
					"match": "(?<=\\s|^)sub(?=\\s|$)"
				},
				{
					"name": "entity.name.function",
					"match": "(?<=\\s|^)div(?=\\s|$)"
				},
				{
					"name": "entity.name.function",
					"match": "(?<=\\s|^)mult(?=\\s|$)"
				},
				{
					"name": "entity.name.function",
					"match": "(?<=\\s|^)inc(?=\\s|$)"
				},
				{
					"name": "entity.name.function",
					"match": "(?<=\\s|^)dec(?=\\s|$)"
				},
				{
					"name": "entity.name.function",
					"match": "(?<=\\s|^)call(?=\\s|$)"
				},
				{
					"name": "entity.name.function",
					"match": "(?<=\\s|^)ret(?=\\s|$)"
				},
				{
					"name": "entity.name.function",
					"match": "(?<=\\s|^)jmp(?=\\s|$)"
				},
				{
					"name": "entity.name.function",
					"match": "(?<=\\s|^)jmpz(?=\\s|$)"
				},
				{
					"name": "entity.name.function",
					"match": "(?<=\\s|^)jmps(?=\\s|$)"
				},
				{
					"name": "entity.name.function",
					"match": "(?<=\\s|^)jmpb(?=\\s|$)"
				},
				{
					"name": "entity.name.function",
					"match": "(?<=\\s|^)jmpe(?=\\s|$)"
				},
				{
					"name": "entity.name.function",
					"match": "(?<=\\s|^)cmp(?=\\s|$)"
				},
				{
					"name": "entity.name.function",
					"match": "(?<=\\s|^)push(?=\\s|$)"
				},
				{
					"name": "entity.name.function",
					"match": "(?<=\\s|^)pop(?=\\s|$)"
				},
				{
					"name": "entity.name.function",
					"match": "(?<=\\s|^)cpy(?=\\s|$)"
				},
				{
					"name": "entity.name.function",
					"match": "(?<=\\s|^)load(?=\\s|$)"
				},
				{
					"name": "entity.name.function",
					"match": "(?<=\\s|^)mcpy(?=\\s|$)"
				},
				{
					"name": "entity.name.function",
					"match": "(?<=\\s|^)mload(?=\\s|$)"
				},
				{
					"name": "entity.name.function",
					"match": "(?<=\\s|^)mget(?=\\s|$)"
				},
				{
					"name": "entity.name.function",
					"match": "(?<=\\s|^)mset(?=\\s|$)"
				},
				{
					"name": "entity.name.function",
					"match": "(?<=\\s|^)and(?=\\s|$)"
				},
				{
					"name": "entity.name.function",
					"match": "(?<=\\s|^)or(?=\\s|$)"
				},
				{
					"name": "entity.name.function",
					"match": "(?<=\\s|^)not(?=\\s|$)"
				},
				{
					"name": "entity.name.function",
					"match": "(?<=\\s|^)shl(?=\\s|$)"
				},
				{
					"name": "entity.name.function",
					"match": "(?<=\\s|^)shr(?=\\s|$)"
				},
				{
					"name": "entity.name.function",
					"match": "(?<=\\s|^)nop(?=\\s|$)"
				},
				{
					"name": "entity.name.function",
					"match": "(?<=\\s|^)halt(?=\\s|$)"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"begin": "//",
					"end": "\\n",
					"name": "comment.line"
				}
			]
		},
		"compiler-instructions": {
			"patterns": [
				{
					"begin": "<",
					"end": ">",
					"name": "constant.import"
				},
				{
					"match": "(?<=#comment)(.*)",
					"name": "comment.line.italic"
				},
				{
					"match": "#macro",
					"name": "keyword.control"
				},
				{
					"match": "#endmacro",
					"name": "keyword.control"
				},
				{
					"match": "#comment",
					"name": "comment.line"
				},
				{
					"match": "#memorylayout",
					"name": "keyword.control"
				},
				{
					"match": "#endmemorylayout",
					"name": "keyword.control"
				},
				{
					"match": "#includemacrofile",
					"name": "keyword.control"
				},
				{
					"match": "auto|static|incremental|explicit",
					"name": "keyword.control.less"
				}
			]
		},
		"types": {
			"patterns": [
				{
					"match": "%register",
					"name": "variable.parameter"
				},
				{
					"match": "%number",
					"name": "variable.parameter"
				},
				{
					"match": "%address",
					"name": "variable.parameter"
				},
				{
					"match": "%variable",
					"name": "variable.parameter"
				},
				{
					"match": "%lable",
					"name": "variable.parameter"
				}
			]
		},
		"args": {
			"patterns": [
				{
					"match": "%[0-9]{1,}",
					"name": "variable.parameter"
				}
			]
		},
		"literals":{
			"patterns": [
				{
					"match": "0x[0-9A-Fa-f]{1,2}",
					"name": "constant.numeric"
				},
				{
					"match": "[0-9]{1,3}",
					"name": "constant.numeric"
				},
				{
					"match": "~[0-9a-zA-Z]*",
					"name": "keyword.operator"
				},
				{
					"match": "[0-9a-zA-Z]*:",
					"name": "keyword.operator"
				},
				{
					"match": "&r[0-9]{1,2}",
					"name": "constant.language"
				}
			]
		}
	},
	"scopeName": "source.mccpu"
}